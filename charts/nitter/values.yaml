nitter:
  applicationName: "nitter"

  rbac:
    serviceAccount:
      enabled: false
      name: "tiny"

  deployment:
    enabled: true
    securityContext:
      runAsUser: 10000
      runAsGroup: 10000
    containerSecurityContext:
      readOnlyRootFilesystem: true
    strategy:
      type: RollingUpdate
      rollingUpdate:
        maxSurge: 1
    image:
      repository: zedeus/nitter
      tag: latest
      pullPolicy: Always
    startupProbe:
      enabled: true
      failureThreshold: 4
      periodSeconds: 60
      timeoutSeconds: 60
      httpGet:
        path: /jack/status/20
        port: 8080

    readinessProbe:
      enabled: true
      failureThreshold: 4
      periodSeconds: 300
      timeoutSeconds: 60
      httpGet:
        path: /jack/status/20
        port: 8080

    livenessProbe:
      enabled: true
      failureThreshold: 4
      periodSeconds: 300
      timeoutSeconds: 60
      httpGet:
        path: /jack/status/20
        port: 8080

    ports:
    - containerPort: 8080
      name: http
      protocol: TCP

    ingress:
      enabled: false

    volumes:
      nitter-config:
        secret:
          secretName: '{{ template "application.name" . }}-nitterconf'
      route64-config:
        secret:
          secretName: '{{ template "application.name" . }}-route64conf'
      guest-accounts:
        emptyDir: {}
      
    volumeMounts:
      nitter-config:
        mountPath: /src/nitter.conf
        subPath: nitterconf
      guest-accounts:
        mountPath: "/src/guest_accounts.json"
        subPath: "guest_accounts.json"

  secret:
    enabled: true
    files:
      nitterconf:
        data:
          nitterconf: |
            [Server]
            address = "0.0.0.0"
            port = 8080
            https = false  # disable to enable cookies when not using https
            httpMaxConnections = 100
            staticDir = "./public"
            title = "nitter"
            hostname = "nitter.net"

            [Cache]
            listMinutes = 240  # how long to cache list info (not the tweets, so keep it high)
            rssMinutes = 10  # how long to cache rss queries
            redisHost = "nitter-redis"  # Change to "nitter-redis" if using docker-compose
            redisPort = 6379
            redisPassword = ""
            redisConnections = 20  # connection pool size
            redisMaxConnections = 30
            # max, new connections are opened when none are available, but if the pool size
            # goes above this, they're closed when released. don't worry about this unless
            # you receive tons of requests per second

            [Config]
            hmacKey = "secretkey"  # random key for cryptographic signing of video urls
            base64Media = false  # use base64 encoding for proxied media urls
            enableRSS = true  # set this to false to disable RSS feeds
            enableDebug = false  # enable request logs and debug endpoints
            proxy = ""  # http/https url, SOCKS proxies are not supported
            proxyAuth = ""
            tokenCount = 10
            # minimum amount of usable tokens. tokens are used to authorize API requests,
            # but they expire after ~1 hour, and have a limit of 187 requests.
            # the limit gets reset every 15 minutes, and the pool is filled up so there's
            # always at least $tokenCount usable tokens. again, only increase this if
            # you receive major bursts all the time

            # Change default preferences here, see src/prefs_impl.nim for a complete list
            [Preferences]
            theme = "Nitter"
            replaceTwitter = "nitter.net"
            replaceYouTube = "piped.video"
            replaceReddit = "teddit.net"
            proxyVideos = true
            hlsPlayback = false
            infiniteScroll = false
      
redis:
  enabled: true
  persistentVolumeClaim:
    create: false