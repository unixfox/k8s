apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -c
    kompose.service.expose: nitter.unixfox.eu
    kompose.service.expose.tls-secret: nitter-tls
    kompose.version: 1.22.0 (955b78124)
  creationTimestamp: null
  labels:
    io.kompose.service: nitter
  name: nitter
spec:
  replicas: 2
  selector:
    matchLabels:
      io.kompose.service: nitter
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -c
        kompose.service.expose: nitter.unixfox.eu
        kompose.service.expose.tls-secret: nitter-tls
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: nitter
    spec:
      nodeSelector:
        kubernetes.io/arch: amd64
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: io.kompose.service
                operator: In
                values:
                - nitter
            topologyKey: kubernetes.io/hostname
      containers:
        - image: epenguincom/nitter:build-20210614
          resources:
            limits:
              memory: "200Mi"
          env:
            - name: NITTER_HOST
              value: "nitter.unixfox.eu"
            - name: NITTER_NAME
              value: "nitter-unixfox"
            - name: REDIS_HOST
              value: "nitter-redis-headless"
            - name: HMAC_KEY
              value: "{{ required "hmacKey must be set" .Values.hmacKey }}"
            - name: REPLACE_TWITTER
              value: "nitter.unixfox.eu"
            - name: REPLACE_YOUTUBE
              value: "yewtu.be"
            - name: REPLACE_INSTAGRAM
              value: "bibliogram.snopyta.org"
            - name: HLS_PLAYBACK
              value: "true"
            - name: HTTPS
              value: "true"
          name: nitter
          ports:
            - containerPort: 8080
          resources: {}
          readinessProbe:
            httpGet:
              port: 8080
              path: /
          livenessProbe:
            httpGet:
              port: 8080
              path: /
      restartPolicy: Always
status: {}
