apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "invidious.fullname" . }}
  labels:
    app: {{ template "invidious.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: {{ template "invidious.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "invidious.name" . }}
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.nodeSelector }}
      nodeSelector: {{ toYaml .Values.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{ toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      {{- if not (hasKey .Values.config "database_url") }}
      initContainers:
        - name: wait-for-postgresql
          image: postgres
          args:
          - /bin/sh
          - -c
          - until pg_isready -h {{ .Values.config.db.host }} -p {{ .Values.config.db.port }} -U {{ .Values.config.db.user }}; do echo waiting for database; sleep 2; done;
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.containerPorts }}
        ports:
        - containerPort: 3000
        {{- end }}
        volumeMounts:
        {{- if .Values.extraVolumesMounts }}
{{ toYaml .Values.extraVolumesMounts | indent 8 }}
        {{- end }}
        env:
        - name: INVIDIOUS_CONFIG
          valueFrom:
            configMapKeyRef:
              key: INVIDIOUS_CONFIG
              name: {{ template "invidious.fullname" . }}
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        {{- if .Values.extraEnv }}
{{ toYaml .Values.extraEnv | indent 8 }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          capabilities:
            drop:
            - ALL
        resources:
{{ toYaml .Values.resources | indent 10 }}
        readinessProbe:
          httpGet:
            port: 3000
            path: /api/v1/stats
        livenessProbe:
          httpGet:
            port: 3000
            path: /api/v1/stats
          initialDelaySeconds: 15
      restartPolicy: Always
      volumes:
        {{- if .Values.extraVolumes }}
{{ toYaml .Values.extraVolumes | indent 8 }}
        {{- end }}
{{- if .Values.refresh.enabled }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "invidious.fullname" . }}-refresh
  labels:
    app: {{ template "invidious.name" . }}-refresh
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: {{ .Release.Name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ template "invidious.name" . }}-refresh
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "invidious.name" . }}-refresh
        chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
        release: {{ .Release.Name }}
    spec:
      {{- if .Values.tolerations }}
      tolerations: {{ toYaml .Values.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{ toYaml .Values.affinity | nindent 8 }}
      {{- end }}
      securityContext:
        runAsUser: {{ .Values.securityContext.runAsUser }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        fsGroup: {{ .Values.securityContext.fsGroup }}
      initContainers:
        - name: wait-for-postgresql
          image: postgres
          args:
          - /bin/sh
          - -c
          - until pg_isready -h {{ .Values.config.db.host }} -p {{ .Values.config.db.port }} -U {{ .Values.config.db.user }}; do echo waiting for database; sleep 2; done;
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.containerPorts }}
        ports:
          - containerPort: 3000
        {{- end }}
        env:
        - name: INVIDIOUS_CHANNEL_THREADS
          value: "1"
        - name: INVIDIOUS_FEED_THREADS
          value: "1"
        - name: INVIDIOUS_USE_PUBSUB_FEEDS
          value: "true"
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: INVIDIOUS_CONFIG
          valueFrom:
            configMapKeyRef:
              key: INVIDIOUS_CONFIG
              name: {{ template "invidious.fullname" . }}
        {{- if .Values.extraEnv }}
{{ toYaml .Values.extraEnv | indent 8 }}
        {{- end }}
        securityContext:
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          capabilities:
            drop:
            - ALL
        resources:
{{ toYaml .Values.resources | indent 10 }}
        readinessProbe:
          httpGet:
            port: 3000
            path: /api/v1/stats
        livenessProbe:
          httpGet:
            port: 3000
            path: /api/v1/stats
          initialDelaySeconds: 15
      restartPolicy: Always
{{ end }}