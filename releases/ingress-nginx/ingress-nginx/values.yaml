controller:
  watchIngressWithoutClass: true
  dnsPolicy: ClusterFirstWithHostNet
  metrics:
    port: 10254
    enabled: true
  podAnnotations:
    prometheus.io/port: "10254"
  config:
    ssl-protocols: "TLSv1.2 TLSv1.3"
    ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384"
    hsts-preload: "true"
    disable-access-log: "true"
    error-log-level: "error"
    use-gzip: "true"
    lua-shared-dicts: "limit_api_captions: 100, limit_api_storyboards: 100, limit_api_subscriptions: 100, limit_feed_channel: 100, limit_login: 100, limit_videoplayback: 100, limit_main_routes: 100"
    worker-shutdown-timeout: "0s"
    http-snippet: |
      geo $from_cluster {
        default    0;
        10.10.0.0/16 1;
        10.43.0.0/16 1;
      }

    log-format-upstream: "$remote_addr - $request - $status - $http_referer - $http_user_agent - $request_headers"
    #log-format-upstream: 'verb="$request_method" request="$uri" response=$status clientip="$remote_addr" scheme="$scheme" bytes=$bytes_sent agent="$http_user_agent" referrer="$http_referer" request_time=$request_time upstream_response=$upstream_status upstream_response_time=$upstream_response_time resource_name="$resource_name" resource_namespace="$resource_namespace" resource_type="$resource_type" http_host="$http_host" request_id="$request_id" time_date="$time_iso8601" request_headers="$request_headers"'
    #log-format-escape-json: 'true'

    server-snippet: |
      set_by_lua_block $request_headers{
        local h = ngx.req.get_headers()
        local request_headers_all = ""
        for k, v in pairs(h) do
          local rowtext = ""
          rowtext = string.format("[%s %s]\n", k, v)
          request_headers_all = request_headers_all .. rowtext

        end
        return request_headers_all
      }
  lifecycle:
    preStop:
      exec:
        command:
          - /bin/echo
  extraVolumes:
  - name: luarestylimitcount
    configMap:
      name: ingress-nginx-controller
  - name: sharedsock
    hostPath:
      path: /tmp/http-socket
  - name: cache-proxy-temp
    emptyDir:
      medium: "Memory"
  extraVolumeMounts:
  - mountPath: /etc/nginx/lua/count.lua
    name: luarestylimitcount
    subPath: luaRestyLimitCount
  - name: sharedsock
    mountPath: /app/socket
  - name: cache-proxy-temp
    mountPath: /tmp/proxy-temp
  # extraVolumeMounts:
  # - mountPath: /usr/local/nginx/anti_ddos_challenge.lua
  #   name: antiddos
  #   subPath: anti_ddos_challenge.lua
  # extraVolumes:
  # - hostPath:
  #     path: /etc/nginx/lua/plugins
  #   name: antiddos
  kind: DaemonSet
  hostPort:
    enabled: true
  hostNetwork: true
  tolerations:
  - key: "node.kubernetes.io/unreachable"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 5
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 5
  - key: app-nextcloud
    operator: Equal
    value: "true"
    effect: NoExecute
  service:
    type: ClusterIP
    enabled: true
tcp:
  53: "dns/powerdns-service-dns:dns-tcp::PROXY"
udp:
  53: "dns/powerdns-service-dns:dns-udp"
